Introduction to Kubernetes

Deepak Gunjetti
Software Architect @ Andcloud
deepak@andcloud.io
@dgunjetti

* Pod Security Policies

* Pod Security Policies

- Pod Security Policies enable fine-grained authorization of pod creation and updates.

- A Pod Security Policy is a cluster-level resource that controls security sensitive aspects of the pod specification. The PodSecurityPolicy objects define a set of conditions that a pod must run with, in order to be accepted into the system, as well as defaults for the related fields. 

- Control Aspects

    Running of privileged containers
    Usage of host namespaces
    Usage of host networking and ports
    Usage of volume types
    Linux capabilities

* Pod Security Policies

- Pod security policy control is implemented as an optional (but recommended) admission controller, but doing so without authorizing any policies will prevent any pods from being created in the cluster.

- When a PodSecurityPolicy resource is created, it does nothing. In order to use it, the requesting user or target pod’s service account must be authorized to use the policy, by allowing the use verb on the policy.

- Most Kubernetes pods are not created directly by users. Instead, they are typically created indirectly as part of a Deployment, ReplicaSet, or other templated controller via the controller manager. Granting the controller access to the policy would grant access for all pods created by that the controller, so the preferred method for authorizing policies is to grant access to the pod’s service account

* Pod Security Policies

    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: <role name>
    rules:
    - apiGroups: ['policy']
      resources: ['podsecuritypolicies']
      verbs:     ['use']
      resourceNames:
      - <list of policies to authorize>

- Then the (Cluster)Role is bound to the authorized user(s):

* Pod Security Policies

    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: <binding name>

    roleRef:
      kind: ClusterRole
      name: <role name>
      apiGroup: rbac.authorization.k8s.io

    subjects:
      # Authorize specific service accounts:
    - kind: ServiceAccount
      name: <authorized service account name>
      namespace: <authorized pod namespace>

      # Authorize specific users (not recommended):
    - kind: User
      apiGroup: rbac.authorization.k8s.io
      name: <authorized user name>

* Pod Security Policies

- If a RoleBinding (not a ClusterRoleBinding) is used, it will only grant usage for pods being run in the same namespace as the binding. This can be paired with system groups to grant access to all pods run in the namespace:

    # Authorize all service accounts in a namespace:
    - kind: Group
      apiGroup: rbac.authorization.k8s.io
      name: system:serviceaccounts
    
    # Or equivalently, all authenticated users in a namespace:
    - kind: Group
      apiGroup: rbac.authorization.k8s.io
      name: system:authenticated

* Policy Order

- In addition to restricting pod creation and update, pod security policies can also be used to provide default values for many of the fields that it controls. 

- When multiple policies are available, the pod security policy controller selects policies in the following order:

- If any policies successfully validate the pod without altering it, they are used.

- If it is a pod creation request, then the first valid policy in alphabetical order is used.

- Otherwise, if it is a pod update request, an error is returned, because pod mutations are disallowed during update operations.

* Example

We’ll use this service account to mock a non-admin user.

    kubectl create namespace psp-example
    kubectl create serviceaccount -n psp-example fake-user
    kubectl create rolebinding -n psp-example fake-editor --clusterrole=edit --serviceaccount=psp-example:fake-user

    alias kubectl-admin='kubectl -n psp-example'
    alias kubectl-user='kubectl --as=system:serviceaccount:psp-example:fake-user -n psp-example'

* Example.. 

- Create a policy and a pod

.code src/auth/09-psp.yaml

* Example.. 

- Now, as the unprivileged user, try to create a simple pod:

.code src/auth/09-psp01.yaml

Error from server (Forbidden): error when creating "STDIN": pods "pause" is forbidden: unable to validate against any pod security policy: []

- Although the PodSecurityPolicy was created, neither the pod’s service account nor fake-user have permission to use the new policy:

* Example.. 

    kubectl-user auth can-i use podsecuritypolicy/example
    no

    kubectl-admin create role psp:unprivileged \
        --verb=use \
        --resource=podsecuritypolicy \
        --resource-name=example
    
    kubectl-admin create rolebinding fake-user:psp:unprivileged \
        --role=psp:unprivileged \
        --serviceaccount=psp-example:fake-user
    
    kubectl-user auth can-i use podsecuritypolicy/example
    Yes

* Example.. 

- Now retry creating the pod:

    pod "pause" created

- It works as expected! But any attempts to create a privileged pod should still be denied:

    kubectl-user create -f- <<EOF
    apiVersion: v1
    kind: Pod
    metadata:
    name:      privileged
    spec:
    containers:
        - name:  pause
        image: k8s.gcr.io/pause
        securityContext:
            privileged: true
    EOF

* Example.. 

Let’s try that again, slightly differently:

kubectl-user run pause --image=k8s.gcr.io/pause

kubectl-user get pods
No resources found.

kubectl-user get events | head -n 2
MESSAGE
Error creating: pods "pause-7774d79b5-" is forbidden: no providers available to validate pod request

* Example.. 

- Fake-user successfully created the deployment (which successfully created a replicaset), but when the replicaset went to create the pod it was not authorized to use the example podsecuritypolicy.

- In order to fix this, bind the psp:unprivileged role to the pod’s service account instead. In this case (since we didn’t specify it) the service account is default:

    kubectl-admin create rolebinding default:psp:unprivileged \
        --role=psp:unprivileged \
        --serviceaccount=psp-example:default
