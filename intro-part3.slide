Ingress & Network Policy 

Deepak Gunjetti
Solution Architect @ Andcloud
deepak@andcloud.io
@dgunjetti

* Ingress

* Ingress

- Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. 

- Traffic routing is controlled by rules defined on the ingress controller.

- Ingress provides load balancing, SSL termination and name-based virtual hosting.

- Ingress controller is responsible for fulfulling the ingress, usually with load balancer.

- Ingress resource contains rules for directing HTTP traffic.


* Ingress..

.code -edit src/ingress/01-ingress.yaml  /START OMIT/,/END OMIT/

* Ingress rules

- host: if no host is specified, rules apply to all incoming request. If host is provided, the rules apply to that host.

- list of paths: each of which are associated with backend defined by serviceName and servicePort.

* Default Backend

- An Ingress with no rules sends all traffic to a single default backend. 

- The default backend is typically a configuration option of the Ingress controller

- If none of the hosts or paths match the HTTP request in the Ingress objects, the traffic is routed to your default backend.

* Types of Ingress, Single service ingress

- exposing single service

- specifying default backend with no rules.

.code src/ingress/02-single-service.yaml 

*  Single service ingress

- kubectl apply -f ingress.yaml

- kubectl get ingress test-ingress

- shows IP allocated by the Ingress controller to satisfy this Ingress.

* Simple fan out

- Routes traffic from a single IP address to more than one service, based on HTTP URI.

- Ingress allows you to keep the number of load balancer to minimum.

.code src/ingress/03-fan-out.yaml  /START OMIT/,/END OMIT/

- The Ingress controller provisions an load balancer that satisfies the Ingress, as long as the services (s1, s2) exist. 

* Name based virtual hosting

- Name-based virtual hosts support routing HTTP traffic to multiple host names at the same IP address.

  foo.bar.com --|                 |-> foo.bar.com s1:80
                | 178.91.123.132  |
  bar.foo.com --|                 |-> bar.foo.com s2:80

* Name based virtual hosting..

.code src/ingress/04-virtualhosting.yaml  /START OMIT/,/END OMIT/


- If you create an Ingress resource without any hosts defined in the rules, then any web traffic to the IP address of your Ingress controller can be matched without a name based virtual host being required.

* TLS

- You can secure an Ingress by specifying a Secret that contains a TLS private key and certificate. 

- Ingress controller to secure the channel from the client to the load balancer using TLS. 

.code src/ingress/05-tls.yaml  /START OMIT/,/END OMIT/

* TLS

.code src/ingress/05-tls.yaml  /START1 OMIT/,/END1 OMIT/

- certificate is created with CN for sslexample.foo.com.

* Ingress Controllers

- In order for the Ingress resource to work, the cluster must have an ingress controller running.

- Kubernetes as a project currently supports and maintains GCE and nginx controllers.

- Additional controllers, HAProxy, Contour


* Using multiple Ingress controllers

- You may deploy any number of ingress controllers within a cluster. 

- When you create an ingress, you should annotate each ingress with the appropriate ingress.class to indicate which ingress controller should be used if more than one exists within your cluster.

* Network policy

* Network policy

- NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods.

- Network policies are implemented by the network plugin, so you must be using a networking solution which supports NetworkPolicy.

- By default, pods are non-isolated; they accept traffic from any source.

- Pods become isolated by having a NetworkPolicy that selects them. 

* Example

.code src/networkpolicy/02-policy.yaml /START OMIT/,/END OMIT/

* Example...

.code src/networkpolicy/02-policy.yaml /START1 OMIT/,/END1 OMIT/

* Example...

.code src/networkpolicy/02-policy.yaml /START2 OMIT/,/END2 OMIT/

* podSelector

- podSelector selects the grouping of pods to which the policy applies.

- The example policy selects pods with the label “role=db”. 

- An empty podSelector selects all pods in the namespace.

* policyTypes

- policyTypes field indicates whether or not the given policy applies to ingress traffic to selected pod, egress traffic from selected pods, or both.

- If no policyTypes are specified on a NetworkPolicy then by default Ingress

* ingress

- include a list of whitelist ingress rules. 

- Each rule allows traffic which matches both the from and ports sections. 

* from

- The example policy contains a single rule, which matches traffic on a single port, from one of three sources, ipBlock, namespaceSelector, podSelector.

- podSelector: This selects particular Pods in the same namespace as the NetworkPolicy

- namespaceSelector: Selects particular namespaces for which all Pods should be allowed 

- ipBlock: selects particular IP CIDR ranges to allow 

* from..

- namespaceSelector and podSelector: selects particular Pods within particular namespaces.

  ...
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          user: alice
      podSelector:
        matchLabels:
          role: client
  ...

- allowing connections from Pods with the label role=client in namespaces with the label user=alice. 

* from..

  ...
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          user: alice
    - podSelector:
        matchLabels:
          role: client
  ...

- allows connections from Pods in the local Namespace with the label role=client, or from any Pod in any namespace with the label user=alice.

- use "kubectl describe" to see how Kubernetes has interpreted the policy.

* Default deny all ingress traffic

.code src/networkpolicy/03-default.yaml 

* Default allow all ingress traffic

.code src/networkpolicy/04-default.yaml 

- replace ingress with egress for default egress policy.

* Limit access 

- limit access to the nginx service so that only pods with the label access: true can query it. 

.code src/networkpolicy/01-limit-access.yaml 

$ kubectl run busybox --rm -ti --labels="access=true" --image=busybox /bin/sh
/ # wget --spider --timeout=1 nginx
Connecting to nginx (10.100.0.16:80)